//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: endpoint.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Iroha_Protocol_CommandServiceToriiCall: ClientCallUnary {}

fileprivate final class Iroha_Protocol_CommandServiceToriiCallBase: ClientCallUnaryBase<Iroha_Protocol_Transaction, SwiftProtobuf.Google_Protobuf_Empty>, Iroha_Protocol_CommandServiceToriiCall {
  override class var method: String { return "/iroha.protocol.CommandService/Torii" }
}

internal protocol Iroha_Protocol_CommandServiceStatusCall: ClientCallUnary {}

fileprivate final class Iroha_Protocol_CommandServiceStatusCallBase: ClientCallUnaryBase<Iroha_Protocol_TxStatusRequest, Iroha_Protocol_ToriiResponse>, Iroha_Protocol_CommandServiceStatusCall {
  override class var method: String { return "/iroha.protocol.CommandService/Status" }
}

internal protocol Iroha_Protocol_CommandServiceStatusStreamCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Iroha_Protocol_ToriiResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Iroha_Protocol_ToriiResponse?>) -> Void) throws
}

internal extension Iroha_Protocol_CommandServiceStatusStreamCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Iroha_Protocol_ToriiResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Iroha_Protocol_CommandServiceStatusStreamCallBase: ClientCallServerStreamingBase<Iroha_Protocol_TxStatusRequest, Iroha_Protocol_ToriiResponse>, Iroha_Protocol_CommandServiceStatusStreamCall {
  override class var method: String { return "/iroha.protocol.CommandService/StatusStream" }
}


/// Instantiate Iroha_Protocol_CommandServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Iroha_Protocol_CommandServiceService: ServiceClient {
  /// Synchronous. Unary.
  func torii(_ request: Iroha_Protocol_Transaction) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func torii(_ request: Iroha_Protocol_Transaction, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Iroha_Protocol_CommandServiceToriiCall

  /// Synchronous. Unary.
  func status(_ request: Iroha_Protocol_TxStatusRequest) throws -> Iroha_Protocol_ToriiResponse
  /// Asynchronous. Unary.
  func status(_ request: Iroha_Protocol_TxStatusRequest, completion: @escaping (Iroha_Protocol_ToriiResponse?, CallResult) -> Void) throws -> Iroha_Protocol_CommandServiceStatusCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func statusStream(_ request: Iroha_Protocol_TxStatusRequest, completion: ((CallResult) -> Void)?) throws -> Iroha_Protocol_CommandServiceStatusStreamCall

}

internal final class Iroha_Protocol_CommandServiceServiceClient: ServiceClientBase, Iroha_Protocol_CommandServiceService {
  /// Synchronous. Unary.
  internal func torii(_ request: Iroha_Protocol_Transaction) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Iroha_Protocol_CommandServiceToriiCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func torii(_ request: Iroha_Protocol_Transaction, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Iroha_Protocol_CommandServiceToriiCall {
    return try Iroha_Protocol_CommandServiceToriiCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func status(_ request: Iroha_Protocol_TxStatusRequest) throws -> Iroha_Protocol_ToriiResponse {
    return try Iroha_Protocol_CommandServiceStatusCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func status(_ request: Iroha_Protocol_TxStatusRequest, completion: @escaping (Iroha_Protocol_ToriiResponse?, CallResult) -> Void) throws -> Iroha_Protocol_CommandServiceStatusCall {
    return try Iroha_Protocol_CommandServiceStatusCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func statusStream(_ request: Iroha_Protocol_TxStatusRequest, completion: ((CallResult) -> Void)?) throws -> Iroha_Protocol_CommandServiceStatusStreamCall {
    return try Iroha_Protocol_CommandServiceStatusStreamCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}
internal protocol Iroha_Protocol_QueryServiceFindCall: ClientCallUnary {}

fileprivate final class Iroha_Protocol_QueryServiceFindCallBase: ClientCallUnaryBase<Iroha_Protocol_Query, Iroha_Protocol_QueryResponse>, Iroha_Protocol_QueryServiceFindCall {
  override class var method: String { return "/iroha.protocol.QueryService/Find" }
}


/// Instantiate Iroha_Protocol_QueryServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Iroha_Protocol_QueryServiceService: ServiceClient {
  /// Synchronous. Unary.
  func find(_ request: Iroha_Protocol_Query) throws -> Iroha_Protocol_QueryResponse
  /// Asynchronous. Unary.
  func find(_ request: Iroha_Protocol_Query, completion: @escaping (Iroha_Protocol_QueryResponse?, CallResult) -> Void) throws -> Iroha_Protocol_QueryServiceFindCall

}

internal final class Iroha_Protocol_QueryServiceServiceClient: ServiceClientBase, Iroha_Protocol_QueryServiceService {
  /// Synchronous. Unary.
  internal func find(_ request: Iroha_Protocol_Query) throws -> Iroha_Protocol_QueryResponse {
    return try Iroha_Protocol_QueryServiceFindCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func find(_ request: Iroha_Protocol_Query, completion: @escaping (Iroha_Protocol_QueryResponse?, CallResult) -> Void) throws -> Iroha_Protocol_QueryServiceFindCall {
    return try Iroha_Protocol_QueryServiceFindCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Iroha_Protocol_CommandServiceProvider {
  func torii(request: Iroha_Protocol_Transaction, session: Iroha_Protocol_CommandServiceToriiSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func status(request: Iroha_Protocol_TxStatusRequest, session: Iroha_Protocol_CommandServiceStatusSession) throws -> Iroha_Protocol_ToriiResponse
  func statusStream(request: Iroha_Protocol_TxStatusRequest, session: Iroha_Protocol_CommandServiceStatusStreamSession) throws -> ServerStatus?
}

internal protocol Iroha_Protocol_CommandServiceToriiSession: ServerSessionUnary {}

fileprivate final class Iroha_Protocol_CommandServiceToriiSessionBase: ServerSessionUnaryBase<Iroha_Protocol_Transaction, SwiftProtobuf.Google_Protobuf_Empty>, Iroha_Protocol_CommandServiceToriiSession {}

internal protocol Iroha_Protocol_CommandServiceStatusSession: ServerSessionUnary {}

fileprivate final class Iroha_Protocol_CommandServiceStatusSessionBase: ServerSessionUnaryBase<Iroha_Protocol_TxStatusRequest, Iroha_Protocol_ToriiResponse>, Iroha_Protocol_CommandServiceStatusSession {}

internal protocol Iroha_Protocol_CommandServiceStatusStreamSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Iroha_Protocol_ToriiResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Iroha_Protocol_ToriiResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Iroha_Protocol_CommandServiceStatusStreamSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Iroha_Protocol_ToriiResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Iroha_Protocol_CommandServiceStatusStreamSessionBase: ServerSessionServerStreamingBase<Iroha_Protocol_TxStatusRequest, Iroha_Protocol_ToriiResponse>, Iroha_Protocol_CommandServiceStatusStreamSession {}


/// Main server for generated service
internal final class Iroha_Protocol_CommandServiceServer: ServiceServer {
  private let provider: Iroha_Protocol_CommandServiceProvider

  internal init(address: String, provider: Iroha_Protocol_CommandServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Iroha_Protocol_CommandServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Iroha_Protocol_CommandServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal override func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    let provider = self.provider
    switch method {
    case "/iroha.protocol.CommandService/Torii":
      return try Iroha_Protocol_CommandServiceToriiSessionBase(
        handler: handler,
        providerBlock: { try provider.torii(request: $0, session: $1 as! Iroha_Protocol_CommandServiceToriiSessionBase) })
          .run()
    case "/iroha.protocol.CommandService/Status":
      return try Iroha_Protocol_CommandServiceStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.status(request: $0, session: $1 as! Iroha_Protocol_CommandServiceStatusSessionBase) })
          .run()
    case "/iroha.protocol.CommandService/StatusStream":
      return try Iroha_Protocol_CommandServiceStatusStreamSessionBase(
        handler: handler,
        providerBlock: { try provider.statusStream(request: $0, session: $1 as! Iroha_Protocol_CommandServiceStatusStreamSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Iroha_Protocol_QueryServiceProvider {
  func find(request: Iroha_Protocol_Query, session: Iroha_Protocol_QueryServiceFindSession) throws -> Iroha_Protocol_QueryResponse
}

internal protocol Iroha_Protocol_QueryServiceFindSession: ServerSessionUnary {}

fileprivate final class Iroha_Protocol_QueryServiceFindSessionBase: ServerSessionUnaryBase<Iroha_Protocol_Query, Iroha_Protocol_QueryResponse>, Iroha_Protocol_QueryServiceFindSession {}


/// Main server for generated service
internal final class Iroha_Protocol_QueryServiceServer: ServiceServer {
  private let provider: Iroha_Protocol_QueryServiceProvider

  internal init(address: String, provider: Iroha_Protocol_QueryServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Iroha_Protocol_QueryServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Iroha_Protocol_QueryServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal override func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    let provider = self.provider
    switch method {
    case "/iroha.protocol.QueryService/Find":
      return try Iroha_Protocol_QueryServiceFindSessionBase(
        handler: handler,
        providerBlock: { try provider.find(request: $0, session: $1 as! Iroha_Protocol_QueryServiceFindSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

