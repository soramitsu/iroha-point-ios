//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ordering.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalCall: ClientCallUnary {}

fileprivate final class Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalCallBase: ClientCallUnaryBase<Iroha_Protocol_Proposal, SwiftProtobuf.Google_Protobuf_Empty>, Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalCall {
  override class var method: String { return "/iroha.ordering.proto.OrderingGateTransportGrpc/onProposal" }
}


/// Instantiate Iroha_Ordering_Proto_OrderingGateTransportGrpcServiceClient, then call methods of this protocol to make API calls.
internal protocol Iroha_Ordering_Proto_OrderingGateTransportGrpcService: ServiceClient {
  /// Synchronous. Unary.
  func onProposal(_ request: Iroha_Protocol_Proposal) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func onProposal(_ request: Iroha_Protocol_Proposal, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalCall

}

internal final class Iroha_Ordering_Proto_OrderingGateTransportGrpcServiceClient: ServiceClientBase, Iroha_Ordering_Proto_OrderingGateTransportGrpcService {
  /// Synchronous. Unary.
  internal func onProposal(_ request: Iroha_Protocol_Proposal) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func onProposal(_ request: Iroha_Protocol_Proposal, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalCall {
    return try Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}
internal protocol Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionCall: ClientCallUnary {}

fileprivate final class Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionCallBase: ClientCallUnaryBase<Iroha_Protocol_Transaction, SwiftProtobuf.Google_Protobuf_Empty>, Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionCall {
  override class var method: String { return "/iroha.ordering.proto.OrderingServiceTransportGrpc/onTransaction" }
}


/// Instantiate Iroha_Ordering_Proto_OrderingServiceTransportGrpcServiceClient, then call methods of this protocol to make API calls.
internal protocol Iroha_Ordering_Proto_OrderingServiceTransportGrpcService: ServiceClient {
  /// Synchronous. Unary.
  func onTransaction(_ request: Iroha_Protocol_Transaction) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func onTransaction(_ request: Iroha_Protocol_Transaction, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionCall

}

internal final class Iroha_Ordering_Proto_OrderingServiceTransportGrpcServiceClient: ServiceClientBase, Iroha_Ordering_Proto_OrderingServiceTransportGrpcService {
  /// Synchronous. Unary.
  internal func onTransaction(_ request: Iroha_Protocol_Transaction) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func onTransaction(_ request: Iroha_Protocol_Transaction, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionCall {
    return try Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Iroha_Ordering_Proto_OrderingGateTransportGrpcProvider {
  func onProposal(request: Iroha_Protocol_Proposal, session: Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
}

internal protocol Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalSession: ServerSessionUnary {}

fileprivate final class Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalSessionBase: ServerSessionUnaryBase<Iroha_Protocol_Proposal, SwiftProtobuf.Google_Protobuf_Empty>, Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalSession {}


/// Main server for generated service
internal final class Iroha_Ordering_Proto_OrderingGateTransportGrpcServer: ServiceServer {
  private let provider: Iroha_Ordering_Proto_OrderingGateTransportGrpcProvider

  internal init(address: String, provider: Iroha_Ordering_Proto_OrderingGateTransportGrpcProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Iroha_Ordering_Proto_OrderingGateTransportGrpcProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Iroha_Ordering_Proto_OrderingGateTransportGrpcProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal override func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    let provider = self.provider
    switch method {
    case "/iroha.ordering.proto.OrderingGateTransportGrpc/onProposal":
      return try Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalSessionBase(
        handler: handler,
        providerBlock: { try provider.onProposal(request: $0, session: $1 as! Iroha_Ordering_Proto_OrderingGateTransportGrpconProposalSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Iroha_Ordering_Proto_OrderingServiceTransportGrpcProvider {
  func onTransaction(request: Iroha_Protocol_Transaction, session: Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
}

internal protocol Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionSession: ServerSessionUnary {}

fileprivate final class Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionSessionBase: ServerSessionUnaryBase<Iroha_Protocol_Transaction, SwiftProtobuf.Google_Protobuf_Empty>, Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionSession {}


/// Main server for generated service
internal final class Iroha_Ordering_Proto_OrderingServiceTransportGrpcServer: ServiceServer {
  private let provider: Iroha_Ordering_Proto_OrderingServiceTransportGrpcProvider

  internal init(address: String, provider: Iroha_Ordering_Proto_OrderingServiceTransportGrpcProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Iroha_Ordering_Proto_OrderingServiceTransportGrpcProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Iroha_Ordering_Proto_OrderingServiceTransportGrpcProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal override func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    let provider = self.provider
    switch method {
    case "/iroha.ordering.proto.OrderingServiceTransportGrpc/onTransaction":
      return try Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionSessionBase(
        handler: handler,
        providerBlock: { try provider.onTransaction(request: $0, session: $1 as! Iroha_Ordering_Proto_OrderingServiceTransportGrpconTransactionSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

